<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SerousCommonLib</name>
    </assembly>
    <members>
        <member name="M:SerousCommonLib.API.Extensions.IterateRandomly``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Iterates through <paramref name="source"/> randomly without repetitions
            </summary>
        </member>
        <member name="M:SerousCommonLib.API.Extensions.IncomingHandlers(MonoMod.Cil.ILCursor)">
            <summary>
            Enumerates all exception handlers whose catch/finally clause end points to the current instruction (<c>handler.HandlerEnd == Next</c>)
            </summary>
        </member>
        <member name="M:SerousCommonLib.API.ILHelper.LogMethodBody(MonoMod.Cil.ILCursor,System.String)">
            <summary>
            Logs information about an <see cref="T:MonoMod.Cil.ILCursor" /> object's method body. <br />
            </summary>
            <param name="c">The IL editing cursor</param>
            <param name="logFilePath">The destination file</param>
        </member>
        <member name="M:SerousCommonLib.API.ILHelper.InitMonoModDumps">
            <summary>
            Initializes automatic dumping of MonoMod assemblies to the tModLoader install directory.<br/>
            Currently does not work due to an issue in MonoMod.
            </summary>
        </member>
        <member name="M:SerousCommonLib.API.ILHelper.DeInitMonoModDumps">
            <summary>
            De-initializes automatic dumping of MonoMod assemblies to the tModLoader install directory.<br/>
            Currently does not work due to an issue in MonoMod.
            </summary>
        </member>
        <member name="M:SerousCommonLib.API.ILHelper.GetInstructionString(MonoMod.Cil.ILCursor,System.Int32)">
            <summary>
            Gets the instruction at the given index, represented as a string.
            </summary>
            <param name="c">The IL cursor.</param>
            <param name="index">The instruction index.</param>
            <returns>The string-represented instruction.</returns>
        </member>
        <member name="M:SerousCommonLib.API.ILHelper.EnsureAreNotNull(System.ValueTuple{System.Reflection.MemberInfo,System.String}[])">
            <summary>
            Verifies that each <see cref="T:System.Reflection.MemberInfo" /> is not null.
            </summary>
            <param name="memberInfos">
            An array of <see cref="T:System.Reflection.MemberInfo" /> objects, paired with an identifier used when throwing the <see cref="T:System.NullReferenceException" /> if the object is null.
            </param>
            <exception cref="T:System.NullReferenceException"/>
        </member>
        <member name="M:SerousCommonLib.API.TooltipHelper.FindLastTooltipLine(Terraria.Item,System.Collections.Generic.List{Terraria.ModLoader.TooltipLine})">
            <summary>
            Returns the index of the last "TooltipX" line in <paramref name="tooltips"/> or the index of the tooltip line that would be immediately before the tooltip if no "TooltipX" line exists
            </summary>
        </member>
        <member name="T:SerousCommonLib.API.Iterators.Iterator`1">
            <summary>
            A base class for enumerables that are loaded on-demand.
            </summary>
            <typeparam name="TSource">The type of each item to yield.</typeparam>
            <remarks>
            <list type="bullet">
            <item><description>
            The value of an iterator is immutable; the operation it represents cannot be changed.
            </description></item>
            <item><description>
            However, an iterator also serves as its own enumerator, so the state of an iterator
            may change as it is being enumerated.
            </description></item>
            <item><description>
            Hence, state that is relevant to an iterator's value should be kept in readonly fields.
            State that is relevant to an iterator's enumeration (such as the currently yielded item)
            should be kept in non-readonly fields.
            </description></item>
            </list>
            </remarks>
        </member>
        <member name="M:SerousCommonLib.API.Iterators.Iterator`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SerousCommonLib.API.Iterators.Iterator`1"/> class.
            </summary>
        </member>
        <member name="P:SerousCommonLib.API.Iterators.Iterator`1.Current">
            <summary>
            The item currently yielded by this iterator.
            </summary>
        </member>
        <member name="M:SerousCommonLib.API.Iterators.Iterator`1.Clone">
            <summary>
            Makes a shallow copy of this iterator.
            </summary>
            <remarks>
            This method is called if <see cref="M:SerousCommonLib.API.Iterators.Iterator`1.GetEnumerator"/> is called more than once.
            </remarks>
        </member>
        <member name="M:SerousCommonLib.API.Iterators.Iterator`1.Dispose">
            <summary>
            Puts this iterator in a state whereby no further enumeration will take place.
            </summary>
            <remarks>
            Derived classes should override this method if necessary to clean up any
            mutable state they hold onto (for example, calling Dispose on other enumerators).
            </remarks>
        </member>
        <member name="M:SerousCommonLib.API.Iterators.Iterator`1.GetEnumerator">
            <summary>
            Gets the enumerator used to yield values from this iterator.
            </summary>
            <remarks>
            If <see cref="M:SerousCommonLib.API.Iterators.Iterator`1.GetEnumerator"/> is called for the first time on the same thread
            that created this iterator, the result will be this iterator. Otherwise, the result
            will be a shallow copy of this iterator.
            </remarks>
        </member>
        <member name="M:SerousCommonLib.API.Iterators.Iterator`1.MoveNext">
            <summary>
            Retrieves the next item in this iterator and yields it via <see cref="P:SerousCommonLib.API.Iterators.Iterator`1.Current"/>.
            </summary>
            <returns><c>true</c> if there was another value to be yielded; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:SerousCommonLib.API.Iterators.Iterator`1.Select``1(System.Func{`0,``0})">
            <summary>
            Returns an enumerable that maps each item in this iterator based on a selector.
            </summary>
            <typeparam name="TResult">The type of the mapped items.</typeparam>
            <param name="selector">The selector used to map each item.</param>
        </member>
        <member name="M:SerousCommonLib.API.Iterators.Iterator`1.Where(System.Func{`0,System.Boolean})">
            <summary>
            Returns an enumerable that filters each item in this iterator based on a predicate.
            </summary>
            <param name="predicate">The predicate used to filter each item.</param>
        </member>
        <member name="T:SerousCommonLib.API.Iterators.RandomEnumerableIterator`1">
            <summary>
            An iterator that randomly iterates through each item of an <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <typeparam name="TSource">The type of the source enumerable.</typeparam>
        </member>
    </members>
</doc>
